//
//  BreedQuizViewController.swift
//  CatApiTest
//
//  Created by Alex Kiritsa on 22.05.2020.
//  Copyright (c) 2020 Alex Kiritsa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BreedQuizDisplayLogic: class {
    func displayData(viewModel: BreedQuiz.Model.ViewModel.ViewModelData)
}

class BreedQuizViewController: UIViewController, BreedQuizDisplayLogic {
    var interactor: BreedQuizBusinessLogic?
    var router: (NSObjectProtocol & BreedQuizRoutingLogic & BreedQuizDataPassing)?
    
    var currentBreed: BreedResponse?
    var buttonArray = [UIButton]()
    // MARK: Create View
    private let imageView: WebImageView = {
        let imageView = WebImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFit
        return imageView
    }()
    
    private let label: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.text = "What breed is the cat in the picture?"
        label.font = .systemFont(ofSize: 22, weight: .bold)
        label.numberOfLines = 1
        label.textAlignment = .center
        label.adjustsFontSizeToFitWidth = true
        label.isHidden = true
        return label
    }()
    
    private let stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.axis = .vertical
        stackView.distribution = .fillEqually
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.isHidden = true
        return stackView
    }()
    
    private let loader: UIActivityIndicatorView = {
        let loader = UIActivityIndicatorView()
        loader.translatesAutoresizingMaskIntoConstraints = false
        loader.hidesWhenStopped = true
        return loader
    }()
    
    private let reloadQuizButton: UIButton = {
        let button = UIButton()
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setImage(UIImage(named: "reload"), for: .normal)
        button.isHidden = true
        button.addTarget(self, action: #selector(reloadQuiz), for: .touchUpInside)
        return button
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = BreedQuizInteractor()
        let presenter = BreedQuizPresenter()
        let router = BreedQuizRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = ColorConstant.fourthColor
        title = "Quiz"
        
        setConstraints()
        interactor?.makeRequest(request: .getBreed)
        loader.startAnimating()
    }
    
    private func prepareForReload() {
        for view in buttonArray {
            stackView.removeArrangedSubview(view)
        }
        buttonArray = []
        imageView.image = nil
        
        imageView.isHidden = true
        label.isHidden = true
        stackView.isHidden = true
        reloadQuizButton.isHidden = true
        
        loader.startAnimating()
    }
    
    func displayData(viewModel: BreedQuiz.Model.ViewModel.ViewModelData) {
        switch viewModel {
        case .displayBreedQuiz(let quizViewModel):
            imageView.set(imageURL: quizViewModel.imageUrl)
            currentBreed = quizViewModel.currentBreed
            setButton(array: quizViewModel.buttonText)
            loader.stopAnimating()
            
            imageView.isHidden = false
            label.isHidden = false
            stackView.isHidden = false
        }
    }
    
    private func setButton(array: [String]) {
        var counter = 0
        for text in array {
            let button = UIButton()
            button.backgroundColor = ColorConstant.firstColor
            button.layer.cornerRadius = 10
            button.clipsToBounds = true
            button.setTitle(text, for: .normal)
            button.addTarget(self, action: #selector(checkResponse(_:)), for: .touchUpInside)
            button.tag = counter
            counter += 1
            
            stackView.addArrangedSubview(button)
            buttonArray.append(button)
        }
    }
    
    @objc private func checkResponse(_ sender: UIButton) {
        for button in buttonArray {
            if button.titleLabel?.text == currentBreed?.name {
                button.backgroundColor = ColorConstant.thirdColor
            } else {
                if button == sender {
                    sender.backgroundColor = ColorConstant.badAnswerColor
                } else {
                    button.isEnabled = false
                    button.backgroundColor = ColorConstant.otherAnswerColor
                }
            }
        }
        reloadQuizButton.isHidden = false
    }
    
    @objc private func reloadQuiz() {
        interactor?.makeRequest(request: .getBreed)
        prepareForReload()
    }
}

extension BreedQuizViewController {
    //MARK: Set Constraints
    private func setConstraints() {
        view.addSubview(imageView)
        view.addSubview(label)
        view.addSubview(stackView)
        view.addSubview(loader)
        view.addSubview(reloadQuizButton)
        
        imageView.topAnchor.constraint(equalTo: view.topAnchor, constant: 56).isActive = true
        imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        imageView.heightAnchor.constraint(equalToConstant: 300).isActive = true
        
        label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 20).isActive = true
        label.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10).isActive = true
        label.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10).isActive = true
        
        stackView.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 20).isActive = true
        stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 40).isActive = true
        stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -40).isActive = true
        stackView.bottomAnchor.constraint(equalTo: reloadQuizButton.topAnchor, constant: -15).isActive = true
        
        loader.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        loader.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        
        reloadQuizButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        reloadQuizButton.widthAnchor.constraint(equalToConstant: 50).isActive = true
        reloadQuizButton.heightAnchor.constraint(equalToConstant: 50).isActive = true
        reloadQuizButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -15).isActive = true
    }
}
